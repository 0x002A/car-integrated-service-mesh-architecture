// SPDX-License-Identifier: MIT
// Copyright (c) 2025 MBition GmbH

//Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: carisma/service/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceRegistryService_OpenChannel_FullMethodName = "/carisma.service.v1.ServiceRegistryService/OpenChannel"
)

// ServiceRegistryServiceClient is the client API for ServiceRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceRegistryServiceClient interface {
	OpenChannel(ctx context.Context, opts ...grpc.CallOption) (ServiceRegistryService_OpenChannelClient, error)
}

type serviceRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryServiceClient(cc grpc.ClientConnInterface) ServiceRegistryServiceClient {
	return &serviceRegistryServiceClient{cc}
}

func (c *serviceRegistryServiceClient) OpenChannel(ctx context.Context, opts ...grpc.CallOption) (ServiceRegistryService_OpenChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceRegistryService_ServiceDesc.Streams[0], ServiceRegistryService_OpenChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRegistryServiceOpenChannelClient{stream}
	return x, nil
}

type ServiceRegistryService_OpenChannelClient interface {
	Send(*ServiceAnnouncement) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type serviceRegistryServiceOpenChannelClient struct {
	grpc.ClientStream
}

func (x *serviceRegistryServiceOpenChannelClient) Send(m *ServiceAnnouncement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRegistryServiceOpenChannelClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceRegistryServiceServer is the server API for ServiceRegistryService service.
// All implementations must embed UnimplementedServiceRegistryServiceServer
// for forward compatibility
type ServiceRegistryServiceServer interface {
	OpenChannel(ServiceRegistryService_OpenChannelServer) error
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

// UnimplementedServiceRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceRegistryServiceServer struct {
}

func (UnimplementedServiceRegistryServiceServer) OpenChannel(ServiceRegistryService_OpenChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (UnimplementedServiceRegistryServiceServer) mustEmbedUnimplementedServiceRegistryServiceServer() {
}

// UnsafeServiceRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServiceServer will
// result in compilation errors.
type UnsafeServiceRegistryServiceServer interface {
	mustEmbedUnimplementedServiceRegistryServiceServer()
}

func RegisterServiceRegistryServiceServer(s grpc.ServiceRegistrar, srv ServiceRegistryServiceServer) {
	s.RegisterService(&ServiceRegistryService_ServiceDesc, srv)
}

func _ServiceRegistryService_OpenChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceRegistryServiceServer).OpenChannel(&serviceRegistryServiceOpenChannelServer{stream})
}

type ServiceRegistryService_OpenChannelServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ServiceAnnouncement, error)
	grpc.ServerStream
}

type serviceRegistryServiceOpenChannelServer struct {
	grpc.ServerStream
}

func (x *serviceRegistryServiceOpenChannelServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRegistryServiceOpenChannelServer) Recv() (*ServiceAnnouncement, error) {
	m := new(ServiceAnnouncement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceRegistryService_ServiceDesc is the grpc.ServiceDesc for ServiceRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carisma.service.v1.ServiceRegistryService",
	HandlerType: (*ServiceRegistryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenChannel",
			Handler:       _ServiceRegistryService_OpenChannel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "carisma/service/v1/service.proto",
}
