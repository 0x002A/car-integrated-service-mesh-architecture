// SPDX-License-Identifier: MIT
// Copyright (c) 2025 MBition GmbH

//Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: carisma/node/v1/node.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeRegistryService_Register_FullMethodName    = "/carisma.node.v1.NodeRegistryService/Register"
	NodeRegistryService_OpenChannel_FullMethodName = "/carisma.node.v1.NodeRegistryService/OpenChannel"
)

// NodeRegistryServiceClient is the client API for NodeRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeRegistryServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	OpenChannel(ctx context.Context, opts ...grpc.CallOption) (NodeRegistryService_OpenChannelClient, error)
}

type nodeRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRegistryServiceClient(cc grpc.ClientConnInterface) NodeRegistryServiceClient {
	return &nodeRegistryServiceClient{cc}
}

func (c *nodeRegistryServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) OpenChannel(ctx context.Context, opts ...grpc.CallOption) (NodeRegistryService_OpenChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeRegistryService_ServiceDesc.Streams[0], NodeRegistryService_OpenChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRegistryServiceOpenChannelClient{stream}
	return x, nil
}

type NodeRegistryService_OpenChannelClient interface {
	Send(*DeploymentConfiguration) error
	Recv() (*DeploymentConfiguration, error)
	grpc.ClientStream
}

type nodeRegistryServiceOpenChannelClient struct {
	grpc.ClientStream
}

func (x *nodeRegistryServiceOpenChannelClient) Send(m *DeploymentConfiguration) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeRegistryServiceOpenChannelClient) Recv() (*DeploymentConfiguration, error) {
	m := new(DeploymentConfiguration)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeRegistryServiceServer is the server API for NodeRegistryService service.
// All implementations must embed UnimplementedNodeRegistryServiceServer
// for forward compatibility
type NodeRegistryServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	OpenChannel(NodeRegistryService_OpenChannelServer) error
	mustEmbedUnimplementedNodeRegistryServiceServer()
}

// UnimplementedNodeRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeRegistryServiceServer struct {
}

func (UnimplementedNodeRegistryServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNodeRegistryServiceServer) OpenChannel(NodeRegistryService_OpenChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenChannel not implemented")
}
func (UnimplementedNodeRegistryServiceServer) mustEmbedUnimplementedNodeRegistryServiceServer() {}

// UnsafeNodeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRegistryServiceServer will
// result in compilation errors.
type UnsafeNodeRegistryServiceServer interface {
	mustEmbedUnimplementedNodeRegistryServiceServer()
}

func RegisterNodeRegistryServiceServer(s grpc.ServiceRegistrar, srv NodeRegistryServiceServer) {
	s.RegisterService(&NodeRegistryService_ServiceDesc, srv)
}

func _NodeRegistryService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_OpenChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeRegistryServiceServer).OpenChannel(&nodeRegistryServiceOpenChannelServer{stream})
}

type NodeRegistryService_OpenChannelServer interface {
	Send(*DeploymentConfiguration) error
	Recv() (*DeploymentConfiguration, error)
	grpc.ServerStream
}

type nodeRegistryServiceOpenChannelServer struct {
	grpc.ServerStream
}

func (x *nodeRegistryServiceOpenChannelServer) Send(m *DeploymentConfiguration) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeRegistryServiceOpenChannelServer) Recv() (*DeploymentConfiguration, error) {
	m := new(DeploymentConfiguration)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeRegistryService_ServiceDesc is the grpc.ServiceDesc for NodeRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carisma.node.v1.NodeRegistryService",
	HandlerType: (*NodeRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _NodeRegistryService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenChannel",
			Handler:       _NodeRegistryService_OpenChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "carisma/node/v1/node.proto",
}
